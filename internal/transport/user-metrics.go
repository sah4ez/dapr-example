// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"fmt"
	"time"

	"github.com/go-kit/kit/metrics"
	"github.com/sah4ez/dapr-example/interfaces"
	"github.com/sah4ez/dapr-example/interfaces/types"
)

type metricsUser struct {
	next            interfaces.User
	requestCount    metrics.Counter
	requestCountAll metrics.Counter
	requestLatency  metrics.Histogram
}

func metricsMiddlewareUser(next interfaces.User) interfaces.User {
	return &metricsUser{
		next:            next,
		requestCount:    RequestCount.With("service", "User"),
		requestCountAll: RequestCountAll.With("service", "User"),
		requestLatency:  RequestLatency.With("service", "User"),
	}
}

func (m metricsUser) GetNameByID(ctx context.Context, id types.ID) (user types.User, err error) {

	defer func(begin time.Time) {
		m.requestLatency.With("method", "getNameByID", "success", fmt.Sprint(err == nil)).Observe(time.Since(begin).Seconds())
	}(time.Now())

	defer m.requestCount.With("method", "getNameByID", "success", fmt.Sprint(err == nil)).Add(1)

	m.requestCountAll.With("method", "getNameByID").Add(1)

	return m.next.GetNameByID(ctx, id)
}
