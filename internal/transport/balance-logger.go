// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package transport

import (
	"context"
	"time"

	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"github.com/sah4ez/dapr-example/interfaces"
	"github.com/sah4ez/dapr-example/interfaces/types"
	"github.com/sah4ez/dapr-example/internal/transport/viewer"
)

type loggerBalance struct {
	next interfaces.Balance
}

func loggerMiddlewareBalance() MiddlewareBalance {
	return func(next interfaces.Balance) interfaces.Balance {
		return &loggerBalance{next: next}
	}
}

func (m loggerBalance) GetBalance(ctx context.Context, id types.ID) (user types.Balance, err error) {
	logger := log.Ctx(ctx).With().Str("service", "Balance").Str("method", "getBalance").Logger()
	defer func(begin time.Time) {
		logHandle := func(ev *zerolog.Event) {
			fields := map[string]interface{}{
				"request":  viewer.Sprintf("%+v", requestBalanceGetBalance{Id: id}),
				"response": viewer.Sprintf("%+v", responseBalanceGetBalance{User: user}),
			}
			ev.Fields(fields).Str("took", time.Since(begin).String())
		}
		if err != nil {
			logger.Error().Err(err).Func(logHandle).Msg("call getBalance")
			return
		}
		logger.Info().Func(logHandle).Msg("call getBalance")
	}(time.Now())
	return m.next.GetBalance(ctx, id)
}
