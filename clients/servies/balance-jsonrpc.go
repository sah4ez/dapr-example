// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package servies

import (
	"context"
	"fmt"

	"github.com/sah4ez/dapr-example/clients/servies/hasher"
	"github.com/sah4ez/dapr-example/clients/servies/jsonrpc"
	"github.com/sah4ez/dapr-example/interfaces/types"
)

type ClientBalance struct {
	*ClientJsonRPC
}

type retBalanceGetBalance = func(user types.Balance, err error)

func (cli *ClientBalance) GetBalance(ctx context.Context, id types.ID) (user types.Balance, err error) {

	request := requestBalanceGetBalance{Id: id}
	var response responseBalanceGetBalance
	var rpcResponse *jsonrpc.ResponseRPC
	cacheKey, _ := hasher.Hash(request)
	rpcResponse, err = cli.rpc.Call(ctx, "balance.getbalance", request)
	var fallbackCheck func(error) bool
	if cli.fallbackBalance != nil {
		fallbackCheck = cli.fallbackBalance.GetBalance
	}
	if rpcResponse != nil && rpcResponse.Error != nil {
		if cli.errorDecoder != nil {
			err = cli.errorDecoder(rpcResponse.Error.Raw())
		} else {
			err = fmt.Errorf(rpcResponse.Error.Message)
		}
	}
	if err = cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response); err != nil {
		return
	}
	return response.User, err
}

func (cli *ClientBalance) ReqGetBalance(ctx context.Context, callback retBalanceGetBalance, id types.ID) (request RequestRPC) {

	request = RequestRPC{rpcRequest: &jsonrpc.RequestRPC{
		ID:      jsonrpc.NewID(),
		JSONRPC: jsonrpc.Version,
		Method:  "balance.getbalance",
		Params:  requestBalanceGetBalance{Id: id},
	}}
	if callback != nil {
		var response responseBalanceGetBalance
		request.retHandler = func(err error, rpcResponse *jsonrpc.ResponseRPC) {
			cacheKey, _ := hasher.Hash(request.rpcRequest.Params)
			var fallbackCheck func(error) bool
			if cli.fallbackBalance != nil {
				fallbackCheck = cli.fallbackBalance.GetBalance
			}
			if rpcResponse != nil && rpcResponse.Error != nil {
				if cli.errorDecoder != nil {
					err = cli.errorDecoder(rpcResponse.Error.Raw())
				} else {
					err = fmt.Errorf(rpcResponse.Error.Message)
				}
			}
			callback(response.User, cli.proceedResponse(ctx, err, cacheKey, fallbackCheck, rpcResponse, &response))
		}
	}
	return
}
