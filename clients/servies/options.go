// GENERATED BY 'T'ransport 'G'enerator. DO NOT EDIT.
package servies

import (
	"time"

	"github.com/sah4ez/dapr-example/clients/servies/cb"
	"github.com/sah4ez/dapr-example/clients/servies/jsonrpc"
)

type Option func(cli *ClientJsonRPC)

func (cli *ClientJsonRPC) applyOpts(opts []Option) {
	for _, op := range opts {
		op(cli)
	}
}

func DecodeError(decoder ErrorDecoder) Option {
	return func(cli *ClientJsonRPC) {
		cli.errorDecoder = decoder
	}
}

func Cache(cache cache) Option {
	return func(cli *ClientJsonRPC) {
		cli.cache = cache
	}
}

func CircuitBreaker(cfg cb.Settings) Option {
	return func(cli *ClientJsonRPC) {
		cli.cbCfg = cfg
	}
}

func FallbackTTL(ttl time.Duration) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackTTL = ttl
	}
}

func FallbackBalanceErr(fallback fallbackBalance) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackBalance = fallback
	}
}

func FallbackUserErr(fallback fallbackUser) Option {
	return func(cli *ClientJsonRPC) {
		cli.fallbackUser = fallback
	}
}

func Headers(headers ...interface{}) Option {
	return func(cli *ClientJsonRPC) {
		cli.rpcOpts = append(cli.rpcOpts, jsonrpc.HeaderFromCtx(headers...))
	}
}

func Insecure() Option {
	return func(cli *ClientJsonRPC) {
		cli.rpcOpts = append(cli.rpcOpts, jsonrpc.Insecure())
	}
}

func LogRequest() Option {
	return func(cli *ClientJsonRPC) {
		cli.rpcOpts = append(cli.rpcOpts, jsonrpc.LogRequest())
	}
}

func LogOnError() Option {
	return func(cli *ClientJsonRPC) {
		cli.rpcOpts = append(cli.rpcOpts, jsonrpc.LogOnError())
	}
}
